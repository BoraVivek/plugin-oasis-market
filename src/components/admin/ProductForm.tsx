import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Product } from '@/lib/types';
import { createProduct, updateProduct, uploadProductFile, addProductVersion } from '@/lib/api';
import { useMutation, useQuery } from '@tanstack/react-query';
import { toast } from 'sonner';
import { Badge } from '@/components/ui/badge';
import { X, Upload, Loader2 } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { supabase } from '@/integrations/supabase/client';

interface ProductFormProps {
  initialData?: Product;
  onSuccess: () => void;
  onCancel: () => void;
}

const ProductForm = ({ initialData, onSuccess, onCancel }: ProductFormProps) => {
  const [formData, setFormData] = useState<Partial<Product>>({
    title: '',
    summary: '',
    description: '',
    price: 0,
    image: '',
    platform: '',
    category: '',
    tags: [],
    author: '',
    version: '1.0.0',
  });
  
  const [tagInput, setTagInput] = useState('');
  const [productFile, setProductFile] = useState<File | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Get platforms and categories from the database
  const { data: platforms } = useQuery({
    queryKey: ['platforms'],
    queryFn: async () => {
      const { data } = await supabase
        .from('products')
        .select('platform')
        .order('platform', { ascending: true });
      
      // Get unique platforms
      return Array.from(new Set(data?.map(item => item.platform).filter(Boolean))) as string[];
    }
  });
  
  const { data: categories } = useQuery({
    queryKey: ['categories'],
    queryFn: async () => {
      const { data } = await supabase
        .from('products')
        .select('category')
        .order('category', { ascending: true });
      
      // Get unique categories
      return Array.from(new Set(data?.map(item => item.category).filter(Boolean))) as string[];
    }
  });
  
  useEffect(() => {
    if (initialData) {
      setFormData({
        ...initialData,
        // Convert any nulls to appropriate defaults
        summary: initialData.summary || '',
        description: initialData.description || '',
        tags: initialData.tags || [],
        version: initialData.version || '1.0.0',
      });
    }
  }, [initialData]);
  
  const isEditing = !!initialData;
  
  const mutation = useMutation({
    mutationFn: async () => {
      let result;
      
      // First create or update the product
      if (isEditing && initialData) {
        result = await updateProduct(initialData.id, formData as Product);
      } else {
        result = await createProduct(formData as Product);
      }
      
      // If we have a file and this is a new product or we're updating with a file
      if (productFile && result) {
        setIsUploading(true);
        
        try {
          // Create a new version
          const versionData = await addProductVersion({
            product_id: result.id,
            version: formData.version || '1.0.0',
            date: new Date().toISOString(),
            changes: ['Initial release'],
            // Remove the id field as it will be generated by the server
            id: undefined as any // This cast allows us to omit the id property
          });
          
          // Upload the file
          if (versionData) {
            await uploadProductFile(versionData.id, productFile);
          }
          
        } catch (error) {
          console.error('Error uploading file:', error);
          toast.error('Product saved but file upload failed');
        } finally {
          setIsUploading(false);
        }
      }
      
      return result;
    },
    onSuccess: () => {
      toast.success(isEditing ? 'Product updated successfully' : 'Product created successfully');
      onSuccess();
    },
    onError: (error: any) => {
      toast.error(`Failed: ${error.message}`);
    }
  });
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'price' ? parseFloat(value) : value
    }));
  };
  
  const handleSelectChange = (name: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const addTag = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && tagInput.trim()) {
      e.preventDefault();
      if (!formData.tags?.includes(tagInput.trim())) {
        setFormData(prev => ({
          ...prev,
          tags: [...(prev.tags || []), tagInput.trim()]
        }));
      }
      setTagInput('');
    }
  };
  
  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags?.filter(tag => tag !== tagToRemove)
    }));
  };
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setProductFile(e.target.files[0]);
    }
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate form
    if (!formData.title?.trim()) {
      toast.error('Title is required');
      return;
    }
    
    if (!formData.platform?.trim()) {
      toast.error('Platform is required');
      return;
    }
    
    if (!formData.category?.trim()) {
      toast.error('Category is required');
      return;
    }
    
    mutation.mutate();
  };
  
  return (
    <Card className="w-full max-w-4xl">
      <CardHeader>
        <CardTitle>{isEditing ? 'Edit Product' : 'Create New Product'}</CardTitle>
      </CardHeader>
      <form onSubmit={handleSubmit}>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="title">Title *</Label>
              <Input
                id="title"
                name="title"
                value={formData.title}
                onChange={handleChange}
                placeholder="Product Title"
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="version">Version</Label>
              <Input
                id="version"
                name="version"
                value={formData.version}
                onChange={handleChange}
                placeholder="1.0.0"
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="platform">Platform *</Label>
              <Select
                value={formData.platform}
                onValueChange={(value) => handleSelectChange('platform', value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select platform" />
                </SelectTrigger>
                <SelectContent>
                  {platforms && platforms.length > 0 ? (
                    platforms.map(platform => (
                      <SelectItem key={platform} value={platform}>{platform}</SelectItem>
                    ))
                  ) : (
                    <>
                      <SelectItem value="WordPress">WordPress</SelectItem>
                      <SelectItem value="XenForo">XenForo</SelectItem>
                      <SelectItem value="Custom">Custom</SelectItem>
                    </>
                  )}
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
              {formData.platform === 'Other' && (
                <Input
                  className="mt-2"
                  placeholder="Enter custom platform"
                  value={formData.platform === 'Other' ? '' : formData.platform}
                  onChange={(e) => handleSelectChange('platform', e.target.value)}
                />
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="category">Category *</Label>
              <Select
                value={formData.category}
                onValueChange={(value) => handleSelectChange('category', value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {categories && categories.length > 0 ? (
                    categories.map(category => (
                      <SelectItem key={category} value={category}>{category}</SelectItem>
                    ))
                  ) : (
                    <>
                      <SelectItem value="Plugins">Plugins</SelectItem>
                      <SelectItem value="Themes">Themes</SelectItem>
                      <SelectItem value="Extensions">Extensions</SelectItem>
                    </>
                  )}
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
              {formData.category === 'Other' && (
                <Input
                  className="mt-2"
                  placeholder="Enter custom category"
                  value={formData.category === 'Other' ? '' : formData.category}
                  onChange={(e) => handleSelectChange('category', e.target.value)}
                />
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="price">Price ($) *</Label>
              <Input
                id="price"
                name="price"
                type="number"
                value={formData.price}
                onChange={handleChange}
                min="0"
                step="0.01"
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="author">Author *</Label>
              <Input
                id="author"
                name="author"
                value={formData.author}
                onChange={handleChange}
                placeholder="Author Name"
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="image">Image URL</Label>
              <Input
                id="image"
                name="image"
                value={formData.image || ''}
                onChange={handleChange}
                placeholder="https://example.com/image.jpg"
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="file">Product File</Label>
              <div className="flex items-center gap-2">
                <Input
                  ref={fileInputRef}
                  id="file"
                  type="file"
                  onChange={handleFileChange}
                  className="hidden"
                />
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => fileInputRef.current?.click()}
                  className="w-full"
                >
                  <Upload className="h-4 w-4 mr-2" />
                  {productFile ? 'Change File' : 'Upload File'}
                </Button>
              </div>
              {productFile && (
                <div className="text-sm mt-1 flex items-center justify-between border p-2 rounded">
                  <span className="truncate">{productFile.name}</span>
                  <Button 
                    type="button" 
                    variant="ghost" 
                    size="sm" 
                    className="h-8 w-8 p-0"
                    onClick={() => setProductFile(null)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              )}
              {isUploading && (
                <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
                  <div 
                    className="bg-primary h-2.5 rounded-full" 
                    style={{ width: `${uploadProgress}%` }}
                  ></div>
                </div>
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="tags">Tags</Label>
              <div className="flex gap-2 flex-wrap mb-2">
                {formData.tags?.map(tag => (
                  <Badge key={tag} variant="secondary" className="flex items-center gap-1">
                    {tag}
                    <X 
                      className="h-3 w-3 cursor-pointer" 
                      onClick={() => removeTag(tag)}
                    />
                  </Badge>
                ))}
              </div>
              <Input
                id="tags"
                value={tagInput}
                onChange={(e) => setTagInput(e.target.value)}
                onKeyDown={addTag}
                placeholder="Add tag and press Enter"
              />
            </div>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="summary">Summary</Label>
            <Textarea
              id="summary"
              name="summary"
              value={formData.summary || ''}
              onChange={handleChange}
              placeholder="Short summary of the product"
              rows={2}
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              name="description"
              value={formData.description || ''}
              onChange={handleChange}
              placeholder="Detailed description of the product"
              rows={5}
            />
          </div>
        </CardContent>
        
        <CardFooter className="flex justify-between">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button type="submit" disabled={mutation.isPending || isUploading}>
            {mutation.isPending || isUploading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                {isEditing ? 'Updating...' : 'Creating...'}
              </>
            ) : (
              isEditing ? 'Update Product' : 'Create Product'
            )}
          </Button>
        </CardFooter>
      </form>
    </Card>
  );
};

export default ProductForm;
