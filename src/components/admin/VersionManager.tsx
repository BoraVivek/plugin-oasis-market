
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import { addProductVersion, getProductVersions, uploadProductFile } from '@/lib/api';
import { ProductVersion } from '@/lib/types';
import { formatDate } from '@/lib/utils';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Download, Plus, Upload } from 'lucide-react';

interface VersionManagerProps {
  productId: string;
}

const VersionManager = ({ productId }: VersionManagerProps) => {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [version, setVersion] = useState('');
  const [changes, setChanges] = useState('');
  const [file, setFile] = useState<File | null>(null);
  
  const queryClient = useQueryClient();
  
  const { data: versions, isLoading } = useQuery({
    queryKey: ['productVersions', productId],
    queryFn: () => getProductVersions(productId),
  });
  
  const createVersionMutation = useMutation({
    mutationFn: async () => {
      // First create the version
      const changesArray = changes
        .split('\n')
        .map(line => line.trim())
        .filter(line => line !== '');
      
      const newVersion: ProductVersion = {
        id: '',  // Will be generated by Supabase
        product_id: productId,
        version,
        changes: changesArray,
        date: new Date().toISOString(),
      };
      
      const createdVersion = await addProductVersion(newVersion);
      
      // Then upload the file if present
      if (file && createdVersion) {
        await uploadProductFile(createdVersion.id, file);
      }
      
      return createdVersion;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['productVersions', productId] });
      toast.success('Version added successfully');
      setIsDialogOpen(false);
      resetForm();
    },
    onError: (error: any) => {
      toast.error(`Failed to add version: ${error.message}`);
    }
  });
  
  const resetForm = () => {
    setVersion('');
    setChanges('');
    setFile(null);
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!version.trim()) {
      toast.error('Version number is required');
      return;
    }
    
    createVersionMutation.mutate();
  };
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files && e.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
    }
  };
  
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>Version History</CardTitle>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button size="sm" className="ml-auto">
              <Plus className="mr-2 h-4 w-4" />
              Add Version
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Add New Version</DialogTitle>
              <DialogDescription>
                Enter the details for the new product version.
              </DialogDescription>
            </DialogHeader>
            <form onSubmit={handleSubmit}>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="version" className="text-right">
                    Version
                  </Label>
                  <Input
                    id="version"
                    placeholder="e.g. 1.0.1"
                    value={version}
                    onChange={(e) => setVersion(e.target.value)}
                    className="col-span-3"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="file" className="text-right">
                    Upload File
                  </Label>
                  <div className="col-span-3">
                    <Input
                      id="file"
                      type="file"
                      onChange={handleFileChange}
                      className="col-span-3"
                    />
                    {file && (
                      <p className="text-sm text-muted-foreground mt-1">
                        Selected: {file.name} ({(file.size / 1024 / 1024).toFixed(2)} MB)
                      </p>
                    )}
                  </div>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="changes" className="text-right">
                    Changes
                  </Label>
                  <Textarea
                    id="changes"
                    placeholder="Enter changes (one per line)"
                    value={changes}
                    onChange={(e) => setChanges(e.target.value)}
                    className="col-span-3"
                    rows={5}
                  />
                </div>
              </div>
              <DialogFooter>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsDialogOpen(false)}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit" 
                  disabled={createVersionMutation.isPending || !version}
                >
                  {createVersionMutation.isPending ? 'Adding...' : 'Add Version'}
                </Button>
              </DialogFooter>
            </form>
          </DialogContent>
        </Dialog>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="text-center py-4">Loading versions...</div>
        ) : versions && versions.length > 0 ? (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Version</TableHead>
                <TableHead>Date</TableHead>
                <TableHead>Changes</TableHead>
                <TableHead className="text-right">File</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {versions.map((v) => (
                <TableRow key={v.id}>
                  <TableCell className="font-medium">{v.version}</TableCell>
                  <TableCell>{formatDate(v.date || '')}</TableCell>
                  <TableCell>
                    {v.changes && v.changes.length > 0 ? (
                      <ul className="list-disc list-inside space-y-1">
                        {v.changes.map((change, i) => (
                          <li key={i} className="text-sm">{change}</li>
                        ))}
                      </ul>
                    ) : (
                      <span className="text-muted-foreground text-sm">No changes listed</span>
                    )}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button size="sm" variant="outline" className="h-8 px-2">
                      <Download className="h-4 w-4 mr-1" />
                      Download
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        ) : (
          <div className="text-center py-8 text-muted-foreground">
            No versions have been added yet.
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default VersionManager;
